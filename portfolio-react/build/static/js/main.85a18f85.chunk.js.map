{"version":3,"sources":["Context.js","Home/Home.js","About/About.js","Classifiers/MNISTClassifier/MNISTClassifier.js","Classifiers/ImagenetClassifier/ImagenetClassifier.js","Pathfinding/Astar/AstarSidebar.js","Pathfinding/RenderGrid.js","Pathfinding/Astar/Astar.js","Clustering/KNearest/KNearestSidebar.js","Clustering/KNearest/KNearest.js","Notebooks/Notebooks.js","AppRoutes.js","Shared/Navbar.js","Shared/Statusbar.js","3D/AnimationSystem.js","FBX/Animations/Idle.fbx","FBX/Animations/Running.fbx","FBX/Animations/Jump To Freehang.fbx","FBX/Animations/Hanging Idle.fbx","FBX/Animations/Braced To Free Hang.fbx","FBX/Animations/Freehang Drop.fbx","FBX/Animations/Right Turn.fbx","FBX/Animations/Left Turn.fbx","FBX/Animations/Hard Landing.fbx","FBX/Animations/Falling Idle.fbx","FBX/Animations/Pull Heavy Object.fbx","FBX/Animations/Texting While Standing.fbx","FBX/Animations/Walk Strafe Left.fbx","FBX/Animations/Walk Strafe Right.fbx","3D/Animations.js","FBX/Kyle.fbx","3D/Render3D.js","App.js","reportWebVitals.js","index.js"],"names":["PathfindingContext","createContext","ClusterinContext","StatusbarContext","Context3D","Home","props","useState","showText","setShowText","useContext","render3DLoaded","homeKyleTextingTrrigger","useEffect","style","position","left","right","top","bottom","textAlign","startDelay","speed","fontFamily","fontSize","About","StatusTypes","require","MNISTClassifier","canvasRef","useRef","setGlobalStatus","globalStatus","result","setResult","PredictDigit","a","Loading","image","current","getSaveData","JSON","parse","lines","length","fetch","method","body","response","status","text","Ready","Error","Failed","paddingBottom","width","margin","Segment","height","border","ref","canvasWidth","canvasHeight","brushRadius","loadTimeOffset","Grid","centered","columns","marginTop","Row","Column","Button","onClick","clear","ImageClassifier","imageURL","setImageURL","urlForm","setUrlForm","openHelp","setOpenHelp","helpImage","setHelpImage","HandlePredictClick","event","Modal","onClose","onOpen","open","Header","Content","Image","fluid","src","wrapped","Actions","color","marginRight","marginLeft","Form","Field","placeholder","onChange","target","value","preventDefault","primary","icon","setTimeout","AstarSidebar","obstacleValue","setObstacleValue","animationTime","setAnimationTime","stickPercentage","setStickPercentage","setSelectedNodeType","selectedNodeType","setClearGrid","clearGrid","handleFindPathClick","setShowFCost","showFCost","pathfindingRunning","setPathfindingRunning","handlePopulateGridClick","handleItemClick","e","name","Menu","vertical","visible","Item","header","label","defaultValue","minValue","maxValue","getValueLabel","step","formatOptions","minimumFractionDigits","onSelectionChange","defaultSelectedKey","pathfindingConfig","NodeType","NodeColors","Node","row","col","nodeType","this","fCost","RenderGrid","pathfindingGrid","setPathfindingGrid","grid","rows","nodeRow","cols","push","Unblocked","CreateGrid","forEach","node","handleNodeClicked","id","split","Open","Explored","Path","Start","Finish","Obstacle","getNodeTypeByString","setRerender","rerender","renderGrid","renderRow","padding","backgroundColor","toString","Astar","nodeSize","HandleResize","numObstacles","stringify","element","handleResult","timeout","ms","Promise","resolve","resultPath","gridHistory","currentRerender","window","addEventListener","Provider","minWidth","zIndex","KNearestSidebar","handlePopulateGraphClick","setNClusters","setNSamples","setStd","handleFindClustersClicked","clusteringRunning","setClusteringRunning","onChangeEnd","colors","KNearest","nClusters","nSamples","std","points","setPoints","classifiers","setClassifiers","document","overflow","handleResize","respone","iter","ComposedChart","CartesianGrid","XAxis","dataKey","type","YAxis","ZAxis","range","Scatter","data","fill","map","entry","index","Cell","shape","Notebooks","Icon","size","AppRoutes","console","log","path","Navbar","navigate","useNavigate","handleNavigate","routerLink","pointing","Dropdown","item","Statusbar","marginBottom","paddingTop","paddingLeft","innerWidth","variant","statusText","gsap","registerPlugin","CustomEase","FBXAnimation","actionAnimationName","animationAction","reset","customEventTracker","events","listener","removeEventListener","AnimationSequenceStep","fbxAnimationName","duration","fadeInDuration","tweenActions","eventStartName","eventFinishedName","sequenceStepStartEvent","Event","sequenceStepFinishedEvent","dispatchEvent","options","addEvent","AnimationLoader","filePath","Tween","gsapEase","local","loop","onComplete","running","gsapTween","sceneObject","TranslateToTween","play","Vector3","copy","applyEuler","THREE","rotation","x","y","z","add","to","ease","kill","RotateToTween","onUpdate","currentQuat","startQuat","rotateTowards","targetQuat","progress","startAngle","setRotationFromQuaternion","objectEuler","setFromEuler","q","multiply","angleTo","AnimationHandler","mixer","fbxAnimations","activeAnimation","elapsedTime","deltaTime","update","fadeDuration","nextAnimation","setLoop","crossFadeTo","AnimationSequenceHandler","animationHandler","defaultAnimationName","defaultAnimationFadeDuration","animationSequence","currentAnimationSequenceStep","sequenceStepTime","sequenceFinished","sequenceStep","sequence","addSequenceStep","shift","sequenceStepName","nextAnimationStep","getNextSequenceStep","playAnimation","stop","invokeFinished","invokeStart","FBXModel","modelPath","scene","scale","animationLoaders","castShadow","receiveShadow","modelLoaded","animationActions","animationSequenceHandler","bones","rootBonePositionOffset","loadingManger","loopListeners","createLoadingManager","loader","FBXLoader","loadModel","onStart","url","loaded","total","onLoad","children","skeleton","fbxAnimation","animationFilePath","animationName","load","object","animations","clipAction","objectWithInvokeFunction","animation","loadAnimation","set","invokeLoopListener","traverse","child","isMesh","loadAnimations","FBXAnimationNames","Idle","Running","JumpToFreehang","HangingIdle","BracedToFreeHang","FreehangDrop","StandRightTurn","StandLeftTurn","HardLanding","FallingIdle","PullHeavyObject","TextingWhileStanding","WalkStrafeLeft","WalkStrafeRight","kyleAnimationLoaders","idleAnimationFBX","runningAnimationFBX","JumpToFreeHang","jumpToFreeHangFBX","hangingIdleFBX","bracedToFreeHangFBX","freehangDropFBX","standRightTurnFBX","standLeftTurnFBX","hardLandingFBX","fallingIdleFBX","pullHeavyObjectFBX","textingWhileStandingFBX","walkStrifeLeftFBX","walkStrifeRightFBX","kyleAnimations","jumpToFreeHangEase","create","Render3D","mount","handleOnFinishedLoading3D","handleNavbarPulled","setRender3DLoaded","handleKyleTexting","frameId","renderer","camera","keyIsPressed","clock","kyleRobot","sceneInitiated","pascalSchottText","getDelta","getElapsedTime","Object","entries","handleKeyPressed","introSequence","fieldOfView","sceneRatio","cameraZ","hScreenEdgeByZPosition","hFOV","Math","atan","tan","PI","abs","createIntroSequence","loadSequence","moveTextTween","addListenerToStep","render","requestAnimationFrame","sceneWidth","sceneHeight","innerHeight","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","code","JumpToFreehangRootMotion","alpha","antialias","shadowMap","enabled","setSize","appendChild","domElement","kyleModel","textConfig","font","FontLoader","robotFont","textColor","geometry","TextGeometry","material","roughness","metalness","pascalText","schottText","plane","hemisphereLight","directionalLight","cleanUp","cancelAnimationFrame","removeChild","WebFont","custom","families","App","windowSize","setWindowSize","render3DVisibility","setRender3DVisibility","setHomeKyleTextingTrrigger","navbar","className","theme","defaultTheme","colorScheme","visibility","overflowY","Dimmer","active","inverted","Loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85a18f85.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const PathfindingContext = createContext(null);\r\nexport const ClusterinContext = createContext(null);\r\nexport const StatusbarContext = createContext(null);\r\nexport const Context3D = createContext(null);","import React, { useContext, useEffect, useState } from 'react';\r\nimport Typing from 'react-typing-animation';\r\nimport gsap from 'gsap';\r\nimport { Context3D } from '../Context';\r\n\r\n\r\nconst Home = (props) => {  \r\n    const [showText, setShowText] = useState(false)\r\n    const { render3DLoaded } = useContext(Context3D);\r\n\r\n    if(props.homeKyleTextingTrrigger != showText){\r\n        setShowText(true); \r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [])    \r\n\r\n    return(\r\n        <div style={{ position : 'absolute', left : '60%', right : '5%', top : 120, bottom : '0%', textAlign : 'justify'}}>              \r\n            {/* <Button\r\n                basic\r\n                color='blue'\r\n                content='Github'\r\n                icon='github'\r\n                label={{\r\n                    as: 'a',\r\n                    basic: true,\r\n                    color: 'blue',\r\n                    pointing: 'left',\r\n                    content: 'Pascal Schott',\r\n                }}\r\n                style={{ marginTop : 20 }}\r\n                onClick={handleGithubClicked}\r\n                /> */}    \r\n            {showText ? \r\n            <div>\r\n                <Typing startDelay={2500} speed={6}>\r\n                    <span style={{ fontFamily : 'Roboto-Thin', fontSize : 20 }}>Welcome!</span>\r\n                </Typing>\r\n                <Typing startDelay={2800} speed={6}>\r\n                    <span style={{ fontFamily : 'Roboto-Thin', fontSize : 20 }}>This is the homepage of Pascal Schott.\r\n                    Most of the content of this website is machine learning related. It is still under development and\r\n                    will likely change in the comming weeks. Most of the projects are designed to be visually appealing.\r\n                    A notebook section with more sophisticated machine learning examples will follow next.</span>\r\n                </Typing>\r\n            </div>\r\n            :\r\n            <div/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, { useEffect } from 'react';\r\n\r\nconst About = () => {   \r\n\r\n    return(\r\n        <div>            \r\n            <h1>About</h1>                \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default About","import React, { useRef, useState, useContext } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport { Grid, Image, Button, Segment } from \"semantic-ui-react\";\r\nimport { StatusbarContext } from \"../../Context\";\r\n\r\nconst StatusTypes = require('../../configs/status.json');\r\n\r\n\r\nconst MNISTClassifier = () => {\r\n    const canvasRef = useRef();\r\n\r\n    const { globalStatus, setGlobalStatus } = useContext(StatusbarContext);\r\n\r\n    const [result, setResult] = useState(\"None\"); \r\n    \r\n    const ClearCanvas = () => {\r\n        canvasRef.current.clear();\r\n        setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : 'Canvas cleared' })\r\n    };\r\n\r\n    const PredictDigit = async () => {\r\n        setGlobalStatus({ 'status' : StatusTypes.Loading, 'statusText' : 'Predicting...' })\r\n        const image = canvasRef.current.getSaveData();        \r\n        if (JSON.parse(image).lines.length > 0) {  \r\n            setResult('Predicting...');    \r\n            const response = await fetch('/api/classify-mnist', {\r\n                method: \"POST\",\r\n                body: image,\r\n            });\r\n    \r\n            if (response.status === 200) {\r\n                const text = await response.text();\r\n                setResult(text);\r\n                setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : `Prediction complete: ${text}` })\r\n            } else {\r\n                setGlobalStatus({ 'status' : StatusTypes.Error, 'statusText' : 'Error from API' })\r\n                setResult(\"Error from API.\");\r\n            }\r\n        }\r\n        else{\r\n            setGlobalStatus({ 'status' : StatusTypes.Failed, 'statusText' : 'Empty canvas' })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{paddingBottom : 40}}>            \r\n            <h1>MNIST Classifier</h1>\r\n            <div style={{paddingBottom: 20}}>\r\n            <div style={{width : 500, margin : 'auto'}}>\r\n                <Segment>\r\n                    You can draw a digit and let the classifier guess which number it is.<br/>\r\n                    (One is currently only working reliable with [I] and not the classical [1]. <br/>\r\n                    The mnist dataset mostly consists of [I]-examples. Fix incoming.)             \r\n                </Segment>\r\n            </div>\r\n            </div>  \r\n            <div style={{width : 500, margin : 'auto'}}>\r\n                <Segment>            \r\n                    <div style={{\r\n                        margin: 'auto', \r\n                        width : 202,\r\n                        height : 202, \r\n                        border: '1px solid black',\r\n                        }}>\r\n                        <CanvasDraw ref={canvasRef} canvasWidth={200} canvasHeight={200} brushRadius={20} loadTimeOffset={1}/>\r\n                    </div>  \r\n                    <Grid centered columns={5} style={{marginTop : 1}}>\r\n                        <Grid.Row>\r\n                            <Grid.Column textAlign=\"center\">\r\n                                <Button onClick={PredictDigit}>Predict</Button> \r\n                            </Grid.Column>\r\n                            <Grid.Column textAlign=\"center\">\r\n                                <Button onClick={ClearCanvas}>Clear</Button> \r\n                            </Grid.Column>\r\n                        </Grid.Row>    \r\n                        <Grid.Row>\r\n                            <h4>Prediction: {result}</h4>\r\n                        </Grid.Row> \r\n                    </Grid>    \r\n                    </Segment>     \r\n            </div> \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MNISTClassifier;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Grid, Image, Button, Segment, Form, Icon, Modal } from \"semantic-ui-react\";\r\nimport { StatusbarContext } from \"../../Context\";\r\n\r\nconst StatusTypes = require('../../configs/status.json');\r\n\r\nconst ImageClassifier = () => {  \r\n    const { globalStatus, setGlobalStatus } = useContext(StatusbarContext);\r\n    \r\n    const [result, setResult] = useState(\"Lion\");\r\n    const [imageURL, setImageURL] = useState(\"https://upload.wikimedia.org/wikipedia/commons/1/1e/Cecil_the_lion_at_Hwange_National_Park_%284516560206%29.jpg\");\r\n    const [urlForm, setUrlForm] = useState(\"\"); \r\n    const [openHelp, setOpenHelp] = useState(false)\r\n    const [helpImage, setHelpImage] = useState(false)\r\n\r\n    useEffect(() => {\r\n    // Placeholder\r\n    }, []);   \r\n   \r\n\r\n    const HandleURLChange = (event) => {\r\n        setUrlForm(event.target.value)\r\n    };\r\n\r\n    const LoadImageURL = (event) => {\r\n        event.preventDefault();\r\n        setImageURL(urlForm);\r\n        setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : 'Image loaded' })\r\n    };    \r\n\r\n    const OpenHelpModal = () => {\r\n        setHelpImage(\"./\")     \r\n        setOpenHelp(true);\r\n        setTimeout(() => {\r\n            setHelpImage(\"./images/ImageInstructions.gif\")\r\n          }, 0)   \r\n    }\r\n\r\n    // Api call to flask\r\n    const HandlePredictClick = async (event) => {  \r\n        setGlobalStatus({ 'status' : StatusTypes.Loading, 'statusText' : 'Predicting...' })\r\n        if (imageURL) {  \r\n            setResult('Predicting...');    \r\n            const response = await fetch('/api/classify-image', {\r\n                method: \"POST\",\r\n                body: imageURL,\r\n            });\r\n    \r\n            if (response.status === 200) {\r\n                const text = await response.text();\r\n                setResult(text);\r\n                setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : `Prediction complete: ${text}` })\r\n            } else {\r\n                setGlobalStatus({ 'status' : StatusTypes.Error, 'statusText' : 'Error from API' })\r\n                setResult(\"Error from API.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (             \r\n        <div style={{paddingBottom : 40}}>     \r\n            <Modal\r\n                onClose={() => setOpenHelp(false)}\r\n                onOpen={() => setOpenHelp(true)}\r\n                open={openHelp}                \r\n            >\r\n                <Modal.Header>Instructions</Modal.Header>\r\n                <Modal.Content image>\r\n                    <Image fluid src={helpImage} wrapped />\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button color='black' onClick={() => setOpenHelp(false)}>\r\n                    Close\r\n                    </Button>                    \r\n                </Modal.Actions>\r\n            </Modal>\r\n            \r\n            <h1>Imagenet</h1>\r\n            <div style={{paddingBottom: 20}}>\r\n                <div style={{width : 500, margin : 'auto'}}>\r\n                    <Segment>\r\n                        <Grid centered>\r\n                            <Grid.Row>\r\n                                <h3 style={{marginRight : 'auto', marginLeft : 'auto'}}>Link to the image</h3>\r\n                            </Grid.Row>\r\n                            <Grid.Row>                            \r\n                                <Grid.Column>                                \r\n                                    <Form>                                    \r\n                                        <Form.Field>                                        \r\n                                            <input placeholder='URL' onChange={HandleURLChange}/>\r\n                                        </Form.Field>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                            </Grid.Row>                        \r\n                            <Grid.Row centered>                                \r\n                                    <Button onClick={LoadImageURL}>Load Image</Button>           \r\n                                    <Button onClick={HandlePredictClick}>Predict</Button>\r\n                                    <Button primary icon onClick={OpenHelpModal}>\r\n                                        \r\n                                    </Button>                                                              \r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <h4>Prediction: {result}</h4>\r\n                        <Image src={imageURL}/>\r\n                    </Segment>\r\n                </div>\r\n            </div>     \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageClassifier;","import React, { useState, useContext } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport {Slider, Picker, Item, Switch } from '@adobe/react-spectrum'\r\nimport { PathfindingContext } from '../../Context';\r\n\r\nconst AstarSidebar = (props) => {\r\n  const [obstacleValue, setObstacleValue] = useState(20)  \r\n  const [animationTime, setAnimationTime] = useState(500)\r\n  const [stickPercentage, setStickPercentage] = useState(0.5)\r\n\r\n  const {selectedNodeType, setSelectedNodeType, clearGrid, setClearGrid, handleFindPathClick,\r\n    showFCost, setShowFCost, pathfindingRunning, setPathfindingRunning, handlePopulateGridClick} = useContext(PathfindingContext)\r\n\r\n  const handleItemClick = (e, { name }) => {\r\n    switch (name) {\r\n      case 'clear':\r\n        if(!pathfindingRunning){\r\n          setClearGrid(true)\r\n        }\r\n        break;\r\n      case 'find':        \r\n        if(!pathfindingRunning){\r\n          handleFindPathClick(animationTime)\r\n          setPathfindingRunning(true)\r\n        }        \r\n        break;    \r\n      case 'populate':\r\n        handlePopulateGridClick(obstacleValue, stickPercentage)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handelShowFCostChange = (value) => {\r\n    setShowFCost(value)\r\n  }\r\n\r\n  const handleObstacleValueChange = (value) => {\r\n    setObstacleValue(value)\r\n  }\r\n\r\n  const handleStickyPercentageValueChange = (value) => {\r\n    setStickPercentage(value)\r\n  }\r\n\r\n  const handleNodeTypeChanged = (value) => {\r\n    setSelectedNodeType(value)\r\n  }\r\n\r\n  const handleAnimationTimeChange = (value) => {\r\n    setAnimationTime(value)\r\n  }\r\n\r\n  return (       \r\n    <Menu vertical visible={false}>\r\n        <Menu.Item header\r\n          name='header'\r\n        >         \r\n          Grid Controll\r\n        </Menu.Item>   \r\n        <Menu.Item name='populate'\r\n          onClick={handleItemClick}>       \r\n          Populate Grid\r\n        </Menu.Item>  \r\n        <Menu.Item name='clear'\r\n          onClick={handleItemClick}\r\n        >        \r\n          Clear Grid\r\n        </Menu.Item>  \r\n        <Menu.Item name='find'\r\n          onClick={handleItemClick}\r\n        >        \r\n          Find Path\r\n        </Menu.Item>  \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Animation Time\" \r\n          defaultValue={500}\r\n          minValue={0}\r\n          maxValue={1000}\r\n          getValueLabel={(value) => `${value} ms`}\r\n          onChange={handleAnimationTimeChange} />        \r\n        </Menu.Item>  \r\n        <Menu.Item>\r\n          <Switch onChange={handelShowFCostChange}>Show F-Cost</Switch>\r\n        </Menu.Item>\r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Obstacles\" \r\n          defaultValue={20}\r\n          minValue={0}\r\n          maxValue={40} \r\n          onChange={handleObstacleValueChange}/>        \r\n        </Menu.Item>  \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Stick Percentage\" \r\n          defaultValue={0.5}\r\n          minValue={0}\r\n          maxValue={1} \r\n          step={0.01}\r\n          formatOptions={{style: 'percent', minimumFractionDigits: 0}}\r\n          onChange={handleStickyPercentageValueChange}/>        \r\n        </Menu.Item>   \r\n        <Menu.Item >\r\n          <Picker label=\"Choose Node Type\" width={150} onSelectionChange={handleNodeTypeChanged} defaultSelectedKey={'obstacle'}>\r\n            <Item key=\"obstacle\">Obstacle</Item>\r\n            <Item key=\"start\">Start</Item>\r\n            <Item key=\"finish\">Finish</Item>\r\n            <Item key=\"unblocked\">Unblocked</Item>\r\n          </Picker>\r\n        </Menu.Item>     \r\n      </Menu>   \r\n  )\r\n}\r\n\r\nexport default AstarSidebar;","import React, { useContext } from 'react';\r\nimport { Segment, Grid } from 'semantic-ui-react'\r\nimport { PathfindingContext } from '../Context';\r\n\r\nconst pathfindingConfig = require('../configs/pathfinding.json');\r\n\r\nconst NodeType = pathfindingConfig['nodeTypes']\r\nconst NodeColors = pathfindingConfig['nodeColors']\r\n\r\nclass Node{\r\n    constructor(row, col, nodeType){\r\n        this.row = row;\r\n        this.col = col;\r\n        this.nodeType = nodeType;\r\n        this.fCost = 0;\r\n    }\r\n}\r\n\r\nconst getNodeTypeByString = (selectedNodeType) => {\r\n    let nodeType = 1\r\n    switch (selectedNodeType) {\r\n        case 'obstacle':\r\n            nodeType = NodeType.Obstacle\r\n            break;\r\n        case 'start':\r\n            nodeType = NodeType.Start\r\n            break; \r\n        case 'unblocked':\r\n            nodeType = NodeType.Unblocked\r\n            break;\r\n        case 'finish':\r\n            nodeType = NodeType.Finish\r\n            break;\r\n        default:\r\n            nodeType = NodeType.Unblocked\r\n            break;\r\n    }    \r\n    return nodeType;\r\n}\r\n\r\nconst CreateGrid = (props) => {\r\n    let grid = []\r\n    for (let row = 0; row < props.rows; row++) { \r\n        let nodeRow = []\r\n        for (let col = 0; col < props.cols; col++) {\r\n            nodeRow.push(new Node(row, col, NodeType.Unblocked))\r\n        }\r\n        grid.push(nodeRow);\r\n    }\r\n    props.setPathfindingGrid(grid);\r\n    return grid\r\n}\r\n\r\nconst RenderGrid = (props) => {\r\n    const {pathfindingGrid, setPathfindingGrid, clearGrid, setClearGrid, selectedNodeType, \r\n        showFCost, result, setResult, pathfindingRunning } = useContext(PathfindingContext)\r\n    let grid = pathfindingGrid\r\n\r\n    if(grid.length === 0){\r\n        grid = CreateGrid({rows: props.rows, cols: props.cols, setPathfindingGrid: setPathfindingGrid})\r\n    }\r\n\r\n    if(clearGrid){\r\n        grid.forEach(row => {\r\n            row.forEach(node => {            \r\n                    node.nodeType = NodeType.Unblocked;  \r\n                    node.fCost = 0;           \r\n            })\r\n        });\r\n        setClearGrid(false);\r\n    }    \r\n\r\n    const handleNodeClicked = (e) => {\r\n        if(pathfindingRunning){\r\n            return null\r\n        }\r\n\r\n        const id = e.target.id.split('/');\r\n        const row = id[0]\r\n        const col = id[1]   \r\n\r\n        if (result !== 'Ready'){\r\n            grid.forEach(row => {\r\n                row.forEach(node => {\r\n                    if(node.nodeType === NodeType.Open || node.nodeType === NodeType.Explored || node.nodeType === NodeType.Path){\r\n                        node.nodeType = NodeType.Unblocked;\r\n                    }\r\n                })\r\n            });\r\n            setResult('Ready')\r\n        }\r\n\r\n        if(selectedNodeType === 'start' || selectedNodeType === 'finish'){\r\n            grid.forEach(row => {\r\n                row.forEach(node => {\r\n                    if(node.nodeType === NodeType.Start && selectedNodeType === 'start'){\r\n                        node.nodeType = NodeType.Unblocked;\r\n                    }\r\n                    else if(node.nodeType === NodeType.Finish && selectedNodeType === 'finish'){\r\n                        node.nodeType = NodeType.Unblocked;\r\n                    }\r\n                })\r\n            });\r\n        }\r\n    \r\n        grid[row][col].nodeType = getNodeTypeByString(selectedNodeType); \r\n        setPathfindingGrid(grid);  \r\n        props.setRerender(!props.rerender);\r\n    }\r\n\r\n    let renderGrid = []\r\n    for (let row = 0; row < props.rows; row++) {        \r\n        let renderRow = []\r\n        for (let col = 0; col < props.cols; col++) {        \r\n            const node = grid[row][col]  \r\n            let color = NodeColors[node.nodeType]            \r\n            \r\n            renderRow.push(\r\n                <Grid.Column style={{margin: 0, padding : 0}} key={'col-' + row.toString() + '/' + col.toString()}>\r\n                    <Segment style={{margin: 2, height : props.height, backgroundColor: color, padding : 0, width : props.width}}\r\n                        textAlign='center'\r\n                        onClick={handleNodeClicked} \r\n                        id={row.toString() + '/' + col.toString()}\r\n                        key={'seg-' + row.toString() + '/' + col.toString()}\r\n                    >\r\n                        {node.nodeType !== NodeType['Unblocked'] && node.nodeType !== NodeType['Obstacle'] && showFCost ? \r\n                            node.fCost\r\n                        :\r\n                            <div></div>\r\n                        }                        \r\n                    </Segment>\r\n                </Grid.Column>\r\n            )            \r\n        } \r\n        renderGrid.push(<Grid.Row style={{margin: 0, padding : 0}} columns={16} key={'row-' + row.toString()}>{renderRow}</Grid.Row>)     \r\n    }\r\n    return renderGrid;\r\n}\r\n\r\nexport default RenderGrid;","import React, { useState, useEffect, useContext, createContext } from 'react';\r\nimport AstarSidebar from './AstarSidebar';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport RenderGrid from '../RenderGrid';\r\nimport { PathfindingContext, StatusbarContext } from '../../Context';\r\n\r\nconst pathfindingConfig = require('../../configs/pathfinding.json');\r\n\r\nconst NodeType = pathfindingConfig['nodeTypes']\r\nconst NodeColors = pathfindingConfig['nodeColors']\r\n\r\nconst StatusTypes = require('../../configs/status.json')\r\n\r\nconst Astar = () => {    \r\n    const { globalStatus, setGlobalStatus } = useContext(StatusbarContext)   \r\n\r\n    const [nodeSize, setNodeSize] = useState(50);\r\n    const [rerender, setRerender] = useState(true)\r\n    const [selectedNodeType, setSelectedNodeType] = useState('obstacle')\r\n    const [clearGrid, setClearGrid] = useState(false)\r\n    const [pathfindingGrid, setPathfindingGrid] = useState([])\r\n    const [result, setResult] = useState('Ready')\r\n    const [showFCost, setShowFCost] = useState(false)\r\n    const [pathfindingRunning, setPathfindingRunning] = useState(false)\r\n\r\n    const rows = 8;\r\n    const cols = 16;\r\n\r\n    if(clearGrid){\r\n        setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : 'Grid cleared' })\r\n    }\r\n\r\n    const HandleResize = () => {\r\n        // setNodeSize((window.innerWidth - gridMargin * 2) / 16)\r\n    };   \r\n    \r\n    const handlePopulateGridClick = async (numObstacles, stickPercentage) => {\r\n        setGlobalStatus({ 'status' : StatusTypes.Loading, 'statusText' : 'Populating Grid' }) \r\n        \r\n        const response = await fetch('/api/populate-grid', {\r\n            method : 'POST',\r\n            body : JSON.stringify({numObstacles, stickPercentage, rows, cols})\r\n        })\r\n\r\n        if (response.status == 200){\r\n            const text = await response.text(); \r\n            const createdGrid  = JSON.parse(text)['grid']\r\n            \r\n            createdGrid.forEach( row => {\r\n                row.forEach( node => {\r\n                    pathfindingGrid[node.row][node.col].nodeType = node.nodeType\r\n                })\r\n            })\r\n            setPathfindingGrid(pathfindingGrid)\r\n            setRerender(!rerender)\r\n            setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : 'Grid Populated' })\r\n        }\r\n        else{\r\n            setGlobalStatus({ 'status' : StatusTypes.Error, 'statusText' : 'Error from API' })\r\n        }\r\n    }\r\n\r\n    const handleFindPathClick = async (animationTime) => {  \r\n        setGlobalStatus({ 'status' : StatusTypes.Loading, 'statusText' : 'Finding Path' })  \r\n        if (pathfindingGrid) {    \r\n            let grid = pathfindingGrid\r\n            grid.forEach(row => {\r\n                row.forEach(element => {                 \r\n                    if(element.nodeType == NodeType.Path || element.nodeType == NodeType.Explored || element.nodeType == NodeType.Open){\r\n                        element.nodeType = NodeType.Unblocked\r\n                    }\r\n                })                \r\n            })       \r\n            setPathfindingGrid(grid)\r\n\r\n            setResult(\"Pathfining...\") \r\n            const response = await fetch('/api/astar-find-path', {\r\n                method: \"POST\",\r\n                body: JSON.stringify(grid),\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                const text = await response.text();                \r\n                handleResult(text, grid, animationTime)\r\n            } else {\r\n                setPathfindingRunning(false)\r\n                setGlobalStatus({ 'status' : StatusTypes.Error, 'statusText' : 'Error from API' })\r\n                setResult(\"Error from API.\");\r\n            }\r\n        }   \r\n    }\r\n\r\n    const timeout = (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const handleResult = async (text, grid, animationTime) => {\r\n        let result = JSON.parse(text)\r\n        let resultPath = result['path']\r\n        let status = result['status']\r\n        let gridHistory = result['gridHistory']\r\n        let currentRerender = rerender\r\n\r\n        if(status == \"success\" || status == \"blocked\"){\r\n            setGlobalStatus({ 'status' : StatusTypes.Loading, 'statusText' : 'Playing animation' }) \r\n            for(const step of gridHistory){\r\n                for(const row of step){\r\n                    for(const node of row){\r\n                        const nodeType = grid[node.row][node.col].nodeType\r\n                        if(nodeType != NodeType['Finish'] && nodeType != NodeType['Start']){\r\n                            grid[node.row][node.col].nodeType = node.nodeType\r\n                        }  \r\n\r\n                        if(node.nodeType == NodeType['Explored'] || node.nodeType == NodeType['Open']){\r\n                            grid[node.row][node.col].fCost = node.fCost;\r\n                        }            \r\n                        else{\r\n                            grid[node.row][node.col].fCost = 0\r\n                        }          \r\n                    }\r\n                }\r\n                setPathfindingGrid(grid);\r\n                currentRerender = !currentRerender\r\n                setRerender(currentRerender)\r\n                await timeout(animationTime);            \r\n            }   \r\n            \r\n            if(status == 'success'){\r\n                for(const element of resultPath){\r\n                    if(grid[element.row][element.col].nodeType != NodeType['Finish']){\r\n                        grid[element.row][element.col].nodeType = NodeType['Path']\r\n    \r\n                        setPathfindingGrid(grid)\r\n                        currentRerender = !currentRerender\r\n                        setRerender(currentRerender)\r\n                        await timeout(animationTime); \r\n                    }                     \r\n                }\r\n                setGlobalStatus({ 'status' : StatusTypes.Ready, 'statusText' : 'Pathfinding successful' }) \r\n            } \r\n            else{\r\n                setGlobalStatus({ 'status' : StatusTypes.Failed, 'statusText' : 'Path blocked' }) \r\n            }           \r\n                        \r\n            setResult(status);     \r\n                   \r\n        }\r\n        else{\r\n            setGlobalStatus({ 'status' : StatusTypes.Error, 'statusText' : 'Error from API' }) \r\n            setResult(status); \r\n        }\r\n\r\n        setPathfindingRunning(false)\r\n    } \r\n\r\n    useEffect(() => {        \r\n        window.addEventListener(\"resize\", HandleResize, false);       \r\n        }, []);\r\n\r\n    return(\r\n        <PathfindingContext.Provider value={{pathfindingGrid, setPathfindingGrid , clearGrid, setClearGrid, \r\n            selectedNodeType, setSelectedNodeType, handleFindPathClick, showFCost, setShowFCost, result, setResult,\r\n            pathfindingRunning, setPathfindingRunning, handlePopulateGridClick}}>\r\n            <div style={{paddingBottom : 40, minWidth : 1200}}>\r\n                <Grid>\r\n                    <Grid.Column width={2} style={{zIndex: 1}}>\r\n                        <div style={{position : 'absolute', zIndex: 1}}>\r\n                    <AstarSidebar/> \r\n                </div>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={14}>\r\n                        <h1>A* Pathfinding</h1>\r\n                        <div style={{marginTop: 40, height : rows * nodeSize, width : cols * nodeSize, marginRight : \"auto\", marginLeft : \"auto\"}}>\r\n                            <Grid>\r\n                                <RenderGrid width={nodeSize}\r\n                                    height={nodeSize} \r\n                                    rows={rows} \r\n                                    cols={cols} \r\n                                    setRerender={setRerender} \r\n                                    rerender={rerender}\r\n                                    />\r\n                            </Grid>\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid>      \r\n            </div>\r\n        </PathfindingContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Astar","import React, { useState, useContext } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport {Slider, Picker, Item, Switch } from '@adobe/react-spectrum'\r\nimport { ClusterinContext } from '../../Context'\r\n\r\nconst KNearestSidebar = (props) => { \r\n  const {handlePopulateGraphClick, setNClusters, setNSamples, setStd,\r\n    handleFindClustersClicked, setAnimationTime, clusteringRunning, setClusteringRunning} = useContext(ClusterinContext)\r\n\r\n  const handleItemClick = (e, { name }) => {\r\n    switch (name) {\r\n      case 'clear':\r\n        break;\r\n      case 'find': \r\n        if(!clusteringRunning){\r\n          handleFindClustersClicked()\r\n          setClusteringRunning(true)\r\n        }        \r\n        break;    \r\n      case 'populate':\r\n        if(!clusteringRunning){\r\n          handlePopulateGraphClick()\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }  \r\n\r\n  const handleAnimationTimeChanged = (value) => {\r\n    setAnimationTime(value)\r\n  }\r\n\r\n  const handleDataPointsChanged = (value) => {\r\n    setNSamples(value)\r\n  }\r\n\r\n  const handleClustersChanged = (value) => {\r\n    setNClusters(value)\r\n  }\r\n\r\n  const handleStdChanged = (value) => {\r\n    setStd(value)\r\n  }\r\n\r\n  return (       \r\n    <Menu vertical visible={false}>\r\n        <Menu.Item header\r\n          name='header'\r\n        >         \r\n          K-Nearest Neighbors\r\n        </Menu.Item>   \r\n        <Menu.Item name='populate'\r\n          onClick={handleItemClick}>       \r\n          Populate Graph\r\n        </Menu.Item>\r\n        <Menu.Item name='find'\r\n          onClick={handleItemClick}>        \r\n          Find Clusters\r\n        </Menu.Item>  \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Animation Time\" \r\n          defaultValue={500}\r\n          minValue={250}\r\n          maxValue={1000}\r\n          getValueLabel={(value) => `${value} ms`}\r\n          onChangeEnd={handleAnimationTimeChanged}\r\n          />        \r\n        </Menu.Item> \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Data Points\" \r\n          defaultValue={50}\r\n          minValue={0}\r\n          maxValue={100}\r\n          onChangeEnd={handleDataPointsChanged}/>        \r\n        </Menu.Item>  \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Clusters\" \r\n          defaultValue={2}\r\n          minValue={1}\r\n          maxValue={10}\r\n          onChangeEnd={handleClustersChanged}/>        \r\n        </Menu.Item> \r\n        <Menu.Item >          \r\n          <Slider width={150} \r\n          label=\"Standard Deviation\" \r\n          defaultValue={1}\r\n          minValue={0}\r\n          maxValue={3} \r\n          step={0.01}\r\n          onChangeEnd={handleStdChanged}/>        \r\n        </Menu.Item>  \r\n      </Menu>   \r\n  )\r\n}\r\n\r\nexport default KNearestSidebar;","import React, { useState, useEffect, useContext } from \"react\";\r\nimport KNearestSidebar from \"./KNearestSidebar\";\r\nimport { ClusterinContext, StatusbarContext } from \"../../Context\";\r\nimport { Scatter, CartesianGrid, XAxis, YAxis, ZAxis, ComposedChart, Cell  } from 'recharts'\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nconst status = require('../../configs/status.json')\r\n\r\nconst colors = [\r\n    '#7FFF00', // Chartreuse\r\n    '#7FFFD4', // Aquamarine\r\n    '#FF7F50', // Coral\r\n    '#5F9EA0', // CadetBlue\r\n    '#8A2BE2', // BlueViolet\r\n    '#008B8B', // DarkCyan\r\n    '#DC143C', // Crimson\r\n    '#696969', // DimGrey\r\n    '#FF00FF', // Magenta\r\n    '#FFFF00'  // Yellow\r\n]\r\n\r\nconst KNearest = () => {\r\n    const {globalStatus, setGlobalStatus} = useContext(StatusbarContext)\r\n\r\n    const [nClusters, setNClusters] = useState(2)\r\n    const [nSamples, setNSamples] = useState(50)\r\n    const [std, setStd] = useState(1)\r\n    const [points, setPoints] = useState([])\r\n    const [classifiers, setClassifiers] = useState([])\r\n    const [animationTime, setAnimationTime] = useState(500)\r\n    const [clusteringRunning, setClusteringRunning] = useState(false)   \r\n\r\n    document.body.style.overflow='hidden'\r\n\r\n    const handleResize = () => {\r\n        \r\n    }\r\n\r\n    useEffect(() => {        \r\n        window.addEventListener(\"resize\", handleResize, false);  \r\n        window.addEventListener(\"scroll\", handleResize, false);     \r\n        }, []);\r\n\r\n    const timeout = async (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const handlePopulateGraphClick = async () => {\r\n        const respone = await fetch('/api/generate-clusters', {\r\n            method : 'POST', \r\n            body : JSON.stringify({\"centers\" : nClusters, \"n_samples\" : nSamples, 'cluster_std' : std})\r\n        })\r\n\r\n        if (respone.status == 200){\r\n            const text = await respone.text()\r\n            const points = JSON.parse(text)\r\n            if (classifiers.length > 0){\r\n                setClassifiers([])\r\n            }\r\n            setGlobalStatus({ 'status' : status.Ready,  'statusText' : 'Clusters created' })\r\n            setPoints(points)\r\n        }\r\n        else{\r\n            setGlobalStatus({ 'status' : status.Error,  'statusText' : 'Error from API' })\r\n        }\r\n    }\r\n\r\n    const handleFindClustersClicked = async () => {\r\n        setGlobalStatus({ 'status' : status.Loading,  'statusText' : 'Classifying clusters' })    \r\n\r\n        if(points.length == 0){\r\n            setGlobalStatus({ 'status' : status.Failed,  'statusText' : 'No points to classify' });\r\n            await timeout(0)\r\n            setClusteringRunning(false);\r\n            return\r\n        }\r\n\r\n        const response = await fetch('/api/knearest', { \r\n            method : 'POST',\r\n            body : JSON.stringify({points, nClusters})\r\n        })\r\n\r\n        if (response.status == 200){\r\n            const text = await response.text()\r\n            const result = JSON.parse(text)\r\n            \r\n            setGlobalStatus({ 'status' : status.Loading,  'statusText' : 'Animation playing' }) \r\n\r\n            for(const iter of result['iteration_tracker']){\r\n                setPoints(iter['points'])\r\n                setClassifiers(iter['classifiers'])\r\n                await timeout(animationTime);  \r\n            }            \r\n\r\n            setPoints(result['points'])\r\n            setClusteringRunning(false)\r\n\r\n            setGlobalStatus({ 'status' : status.Ready,  'statusText' : 'Classifying clusters completed' }) \r\n        }\r\n        else{\r\n            setGlobalStatus({ 'status' : status.Ready,  'statusText' : 'Clusters created' })\r\n            setClusteringRunning(false)\r\n        }\r\n    }\r\n\r\n    return(        \r\n        <ClusterinContext.Provider value={{handlePopulateGraphClick, setNClusters, setNSamples, setStd, \r\n            handleFindClustersClicked, setAnimationTime, clusteringRunning, setClusteringRunning}}>\r\n            <div style={{paddingBottom : 40, minWidth : 1050}}>  \r\n                <Grid>\r\n                    <Grid.Column width={2} style={{zIndex: 1}}>\r\n                        <KNearestSidebar/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={14}>\r\n                        <h1>K-Nearest Neighbors</h1>\r\n                        <div>\r\n                            <ComposedChart width={800}\r\n                                height={450}\r\n                                style={{margin : 'auto'}}\r\n                                >\r\n                                    <CartesianGrid />\r\n                                    <XAxis dataKey=\"x\" name=\"x\" type=\"number\"/>\r\n                                    <YAxis dataKey=\"y\" name=\"y\" />\r\n                                    <ZAxis dataKey=\"z\" name=\"z\" type=\"number\" range={[50, 200]}/>\r\n                                    <Scatter name=\"Points\" data={points} fill=\"#8884d8\">\r\n                                        {points.map((entry, index) => (\r\n                                            <Cell key={`cell-${index}`} fill={colors[entry['classifier']]} />\r\n                                        ))}\r\n                                    </Scatter>\r\n                                    <Scatter name=\"Clasifiers\" data={classifiers} shape=\"cross\" fill=\"#8884d8\">\r\n                                        {points.map((entry, index) => (\r\n                                            <Cell key={`cell-${index}`} fill={colors[index]} />\r\n                                        ))}\r\n                                    </Scatter>\r\n                            </ComposedChart>\r\n                        </div>   \r\n                    </Grid.Column>\r\n                </Grid>                 \r\n            </div>    \r\n        </ClusterinContext.Provider>\r\n    )\r\n}\r\n\r\nexport default KNearest","import React from 'react';\r\nimport { Segment, Icon } from \"semantic-ui-react\";\r\n\r\nconst Notebooks = () => {\r\n    return(\r\n        <div>            \r\n            <h1>Notebooks</h1>\r\n            <Segment style={{ width  : 600, margin : 'auto' }}>\r\n                Work in progress                \r\n            </Segment>\r\n            <Icon name='hourglass outline' size='big' style={{ marginTop : 40 }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notebooks","import React from 'react';\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport Home from './Home/Home';\r\nimport About from './About/About';\r\nimport MNISTClassiefier from './Classifiers/MNISTClassifier/MNISTClassifier';\r\nimport ImageClassifier from './Classifiers/ImagenetClassifier/ImagenetClassifier';\r\nimport Astar from './Pathfinding/Astar/Astar';\r\nimport KNearest from './Clustering/KNearest/KNearest';\r\nimport Notebooks from './Notebooks/Notebooks';\r\n\r\nconst AppRoutes = (props)=> {\r\n    console.log('APP ROUTES RENDER')\r\n    return (     \r\n        <Routes>\r\n            <Route path=\"/\" element={<Home homeKyleTextingTrrigger={props.homeKyleTextingTrrigger}/>} />        \r\n            <Route path=\"/about\" element={<About />} />    \r\n            <Route path=\"/mnist-classifier\" element={<MNISTClassiefier />} /> \r\n            <Route path=\"/imagenet-classifier\" element={<ImageClassifier />} />   \r\n            <Route path=\"/astar-pathfinding\" element={<Astar />} />  \r\n            <Route path=\"/knearest\" element={<KNearest />} />\r\n            <Route path=\"/notebooks\" element={<Notebooks />} />  \r\n        </Routes>\r\n    );\r\n};\r\n\r\nexport default AppRoutes;","import React, { useContext, useEffect } from \"react\";\r\nimport { Dropdown, Menu } from 'semantic-ui-react'\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { StatusbarContext } from \"../Context\";\r\n\r\n\r\nconst StatusTypes = require('../configs/status.json')\r\n\r\nconst Navbar = () => {\r\n  const { globalStatus, setGlobalStatus } = useContext(StatusbarContext)\r\n  let navigate = useNavigate(); \r\n\r\n  const handleNavigate = (routerLink) => {\r\n    navigate(routerLink)\r\n    setGlobalStatus({'status' : StatusTypes.Ready, 'statusText' : 'Ready'})\r\n  }\r\n\r\n  return (      \r\n    <Menu pointing>\r\n      <Menu.Item>\r\n        <img src='./images/Logo.png' />\r\n      </Menu.Item>      \r\n      <Menu.Item\r\n        name='home'\r\n        onClick={() => handleNavigate('/')}\r\n      />        \r\n      <Dropdown item text='Classifiers'>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => handleNavigate('/mnist-classifier')}>MNIST Classifier</Dropdown.Item>\r\n          <Dropdown.Item onClick={() => handleNavigate('/imagenet-classifier')}>Imagenet Classifier</Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <Dropdown item text='Pathfinding'>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => handleNavigate('/astar-pathfinding')}>A* Pathfinding</Dropdown.Item>     \r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <Dropdown item text='Clustering'>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => handleNavigate('/knearest')}>K-Nearest Neighbors</Dropdown.Item>     \r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <Menu.Item\r\n        name='notebooks'\r\n        onClick={() => handleNavigate('/notebooks')}\r\n      />\r\n      <Menu.Item\r\n        name='about'\r\n        onClick={() => handleNavigate('/about')}\r\n      />\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport { Segment } from 'semantic-ui-react'\r\nimport { StatusLight } from '@adobe/react-spectrum'\r\n\r\nconst Statusbar = (props) => {\r\n    const height = 35\r\n    return (\r\n        <div style={{position : 'absolute', \r\n            zIndex: 2,  \r\n            bottom : 0,            \r\n            marginBottom : 0,\r\n            paddingBottom : 0}}>\r\n            <Segment style={{height : height, margin : 'auto', paddingTop : 3, paddingLeft : 2, width : window.innerWidth}} textAlign=\"left\">\r\n                <StatusLight variant={props.status}>{props.statusText}</StatusLight>\r\n            </Segment>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statusbar;","import { gsap } from \"gsap\";\r\nimport { CustomEase } from \"gsap/CustomEase\";\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\r\nimport * as THREE from \"three\";\r\nimport { Vector3 } from \"three\";\r\n\r\ngsap.registerPlugin(CustomEase);\r\n\r\n// const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\r\n\r\nexport class FBXAnimation{\r\n  constructor(name, actionAnimationName){\r\n    this.name = name;\r\n    this.actionAnimationName = actionAnimationName;\r\n    this.animationAction = null;    \r\n  }  \r\n\r\n  reset(){\r\n    this.animationAction.reset()    \r\n  }  \r\n}\r\n\r\nclass CustomEventTracker{\r\n  constructor(){\r\n    this.events = []\r\n  }\r\n\r\n  addEvent(name, listener){\r\n    this.events.push({name, listener});\r\n  }\r\n\r\n  cleanUp(){\r\n    this.events.forEach( (event) => {\r\n      document.removeEventListener(event.name, event.listener);\r\n    })\r\n  }\r\n}\r\n\r\nexport const customEventTracker = new CustomEventTracker();\r\n\r\nexport class AnimationSequenceStep{\r\n  constructor(fbxAnimationName, duration, fadeInDuration, tweenActions = null, name=null){    \r\n    this.fbxAnimationName = fbxAnimationName;\r\n    this.duration =  duration;\r\n    this.fadeInDuration = fadeInDuration;\r\n    this.tweenActions = tweenActions ? tweenActions : [];\r\n    this.name = name;\r\n    \r\n    if(name){\r\n      this.eventStartName = `Sequence Step Start ${name}`;\r\n      this.eventFinishedName = `Sequence Step Finished ${name}`;\r\n      this.sequenceStepStartEvent = new Event(this.eventStartName);\r\n      this.sequenceStepFinishedEvent = new Event(this.eventFinishedName);      \r\n    }    \r\n  }\r\n\r\n  invokeFinished(){\r\n    if(this.sequenceStepFinishedEvent){\r\n      document.dispatchEvent(this.sequenceStepFinishedEvent)\r\n    }  \r\n  }\r\n\r\n  invokeStart(){\r\n    if(this.sequenceStepStartEvent){\r\n      document.dispatchEvent(this.sequenceStepStartEvent)\r\n    }    \r\n  }\r\n\r\n  addEventListener(type, listener, options){\r\n    if(this.name){\r\n      if(type === 'start'){\r\n        document.addEventListener(this.eventStartName, listener, options);\r\n        customEventTracker.addEvent(this.eventStartName, listener);\r\n      }\r\n      if(type === 'finished'){\r\n        document.addEventListener(this.eventFinishedName, listener, options);\r\n        customEventTracker.addEvent(this.eventFinishedName, listener);\r\n      }  \r\n    }      \r\n  }\r\n}\r\n\r\nexport class AnimationLoader{\r\n  constructor(name, filePath){\r\n    this.name = name;\r\n    this.filePath = filePath;     \r\n  }\r\n}\r\n\r\nexport class Tween{\r\n  constructor(duration, gsapEase, local = false, loop=false){\r\n    this.duration = duration;\r\n    this.gsapEase = gsapEase;\r\n    this.local = local;\r\n    this.loop = loop;\r\n    \r\n    this.running = false;\r\n    this.gsapTween =  null;\r\n  }\r\n\r\n  play(sceneObject){\r\n  \r\n  }\r\n\r\n  stop(){\r\n\r\n  }\r\n\r\n  onComplete = () => {\r\n    \r\n  }\r\n}\r\n\r\nexport class TranslateToTween extends Tween{\r\n  constructor(duration, gsapEase, position, local=false, loop=false){\r\n    super(duration, gsapEase, local, loop);\r\n    this.position = position; \r\n\r\n  }\r\n\r\n  play(sceneObject){\r\n    if(this.running) return;\r\n\r\n    this.sceneObject = sceneObject;\r\n    var position = new Vector3();\r\n    position.copy(this.position);    \r\n\r\n    if(this.local){\r\n\r\n      position.applyEuler(new THREE.Euler(sceneObject.rotation.x, sceneObject.rotation.y, sceneObject.rotation.z));\r\n\r\n      position.add(sceneObject.position);         \r\n    }   \r\n\r\n    this.gsapTween = gsap.to(sceneObject.position, { duration : this.duration, ease : this.gsapEase, \r\n      x : position.x, y : position.y, z : position.z, onComplete : this.onComplete })\r\n    this.running = true;\r\n  \r\n  }\r\n\r\n  stop(){\r\n    this.gsapTween.kill()\r\n    this.running = false;\r\n  }  \r\n\r\n  onComplete = () => {\r\n\r\n    if(this.loop && this.local && this.running){\r\n      this.running = false;\r\n      this.play(this.sceneObject);\r\n    }\r\n    else{\r\n      this.running = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport class RotateToTween extends Tween{\r\n  constructor(duration, gsapEase, rotation, local=false, loop=false){\r\n    super(duration, gsapEase, local, loop);\r\n    this.rotation = rotation;     \r\n\r\n    this.progress = 0;\r\n    this.startAngle = 0;\r\n    this.sceneObject = null;\r\n    this.startQuat = null;\r\n  }\r\n\r\n  play(sceneObject){\r\n    if(this.running) return;  \r\n\r\n    this.progress = 0;\r\n    this.sceneObject = sceneObject;\r\n\r\n    var objectEuler = new THREE.Euler(sceneObject.rotation.x, sceneObject.rotation.y, sceneObject.rotation.z);\r\n    var targetQuat = new THREE.Quaternion().setFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));;\r\n    this.startQuat = new THREE.Quaternion().setFromEuler(objectEuler);\r\n\r\n\r\n    if(this.local){   \r\n      var q = new THREE.Quaternion().copy(this.startQuat);\r\n      q.multiply(targetQuat)\r\n      targetQuat = q;\r\n    }\r\n\r\n    this.targetQuat = targetQuat;        \r\n    this.startAngle = this.startQuat.angleTo(targetQuat)\r\n\r\n    this.gsapTween = gsap.to(this, { duration : this.duration, ease : this.gsapEase, \r\n      progress : 1, onComplete : this.onComplete, onUpdate : this.onUpdate })\r\n    this.running = true;   \r\n  }\r\n\r\n  onUpdate = () => {\r\n    var currentQuat = new THREE.Quaternion().copy(this.startQuat)\r\n    currentQuat.rotateTowards(this.targetQuat, this.progress*this.startAngle);\r\n    this.sceneObject.setRotationFromQuaternion(currentQuat); \r\n  }\r\n\r\n  stop(){\r\n    this.gsapTween.kill()\r\n    this.running = false;\r\n  }\r\n\r\n  onComplete = () => {    \r\n\r\n    if(this.loop && this.local && this.running){\r\n      this.running = false;\r\n      this.play(this.sceneObject);\r\n    }\r\n    else{\r\n      this.running = false;\r\n    }    \r\n  }\r\n}\r\n\r\nclass AnimationHandler{\r\n  constructor(mixer, sceneObject){\r\n    this.mixer = mixer;\r\n    this.sceneObject = sceneObject;\r\n    this.fbxAnimations = [];     \r\n    this.activeAnimation = null;    \r\n  }\r\n\r\n  update(elapsedTime, deltaTime){    \r\n    this.mixer.update( deltaTime ); \r\n  }  \r\n\r\n  playAnimation(name, fadeDuration=0, loop=true){   \r\n    var nextAnimation = this.fbxAnimations[name];    \r\n        \r\n    if(loop){\r\n      nextAnimation.animationAction.setLoop(THREE.LoopRepeat);\r\n    }\r\n    else{\r\n      nextAnimation.animationAction.setLoop(THREE.LoopOnce);\r\n    }\r\n\r\n    if(this.activeAnimation){ \r\n      if(this.activeAnimation.animationAction !== nextAnimation.animationAction){        \r\n        nextAnimation.reset();\r\n        this.activeAnimation.animationAction.crossFadeTo(nextAnimation.animationAction, fadeDuration, true).play(); \r\n      }            \r\n    }\r\n    else{\r\n      nextAnimation.reset();\r\n      nextAnimation.animationAction.play()\r\n    }\r\n    this.activeAnimation = nextAnimation;\r\n  }   \r\n}\r\n\r\nclass AnimationSequenceHandler{\r\n  constructor(animationHandler, defaultAnimationName, defaultAnimationFadeDuration){\r\n    this.animationSequence = [];\r\n    this.currentAnimationSequenceStep = null;    \r\n    this.sequenceStepTime = 0;\r\n    this.animationHandler = animationHandler;\r\n    this.defaultAnimationName = defaultAnimationName;\r\n    this.defaultAnimationFadeDuration = defaultAnimationFadeDuration;\r\n    this.sequenceFinished = false;\r\n  }\r\n\r\n  addSequenceStep(sequenceStep){\r\n    this.animationSequence.push(sequenceStep);\r\n  }\r\n\r\n  loadSequence(sequence){\r\n    sequence.forEach( (step) => {\r\n      this.addSequenceStep(step);\r\n    }) \r\n  }\r\n\r\n  getNextSequenceStep(){\r\n    return this.animationSequence.shift();\r\n  }\r\n\r\n  addListenerToStep(sequenceStepName, type, listener, options){\r\n    if(this.animationSequence.length){\r\n \r\n      for(const step of this.animationSequence){\r\n        if(step.name === sequenceStepName){   \r\n          step.addEventListener(type, listener, options); \r\n          break;\r\n        }\r\n      }      \r\n    }\r\n  }\r\n\r\n  update(deltaTime, sceneObject){\r\n    if(!this.sequenceFinished) this.sequenceStepTime += deltaTime;\r\n    \r\n    if(this.animationSequence.length){ \r\n      \r\n      if(this.sequenceFinished) this.sequenceFinished = false;\r\n\r\n      if(!this.currentAnimationSequenceStep || this.sequenceStepTime >= this.currentAnimationSequenceStep.duration){       \r\n         \r\n          let nextAnimationStep = this.getNextSequenceStep();\r\n          this.sequenceStepTime = 0;\r\n          this.animationHandler.playAnimation(nextAnimationStep.fbxAnimationName, nextAnimationStep.fadeInDuration)\r\n\r\n          if(this.currentAnimationSequenceStep){\r\n            for(const tween of this.currentAnimationSequenceStep.tweenActions){\r\n              tween.stop()\r\n            }\r\n\r\n            this.currentAnimationSequenceStep.invokeFinished();\r\n          }\r\n          \r\n          for(const tween of nextAnimationStep.tweenActions){\r\n            tween.play(sceneObject);\r\n          }          \r\n\r\n          this.currentAnimationSequenceStep = nextAnimationStep;     \r\n          this.currentAnimationSequenceStep.invokeStart(); \r\n      }      \r\n    }\r\n    else{\r\n      if(!this.sequenceFinished && this.currentAnimationSequenceStep && this.sequenceStepTime >= this.currentAnimationSequenceStep.duration - this.defaultAnimationFadeDuration){\r\n        \r\n        for(const tween of this.currentAnimationSequenceStep.tweenActions){\r\n          tween.stop()\r\n        }\r\n        \r\n        this.currentAnimationSequenceStep.invokeFinished();\r\n\r\n        this.currentAnimationSequenceStep = null;\r\n        this.sequenceStepTime = 0;\r\n        this.animationHandler.playAnimation(this.defaultAnimationName, this.defaultAnimationFadeDuration)\r\n        this.sequenceFinished = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class FBXModel{\r\n  constructor(modelPath, scene, position, rotation, scale, animationLoaders = null, castShadow =true, receiveShadow = true, defaultAnimationName = 'Idle', \r\n  defaultAnimationFadeDuration = 0.5, fbxAnimations){\r\n    \r\n    this.modelPath = modelPath;\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.scale = scale;\r\n    this.castShadow = castShadow;\r\n    this.receiveShadow = receiveShadow;\r\n    this.scene = scene;\r\n    this.animationLoaders = animationLoaders;\r\n    this.defaultAnimationName = defaultAnimationName;\r\n    this.defaultAnimationFadeDuration = defaultAnimationFadeDuration;\r\n    this.fbxAnimations = fbxAnimations;\r\n\r\n    this.modelLoaded = false;\r\n    \r\n    this.sceneObject = null;\r\n    this.mixer = null;\r\n    this.animationActions = {};\r\n    this.animationHandler = null;  \r\n    this.animationSequenceHandler = null;  \r\n    this.bones = null;  \r\n    this.rootBonePositionOffset = null; \r\n    this.loadingManger = null;\r\n\r\n    this.loopListeners = [];\r\n\r\n    this.createLoadingManager(); \r\n    this.loader = new FBXLoader(this.loadingManger);\r\n\r\n    this.loadModel(animationLoaders);\r\n  }\r\n\r\n  createLoadingManager(){\r\n    this.loadingManger = new THREE.LoadingManager();\r\n    \r\n    this.loadingManger.onStart = (url, loaded, total) => {   \r\n    }\r\n\r\n    this.loadingManger.onLoad = () => {\r\n      \r\n      this.bones = this.sceneObject.children[1].skeleton.bones;      \r\n      this.animationSequenceHandler = new AnimationSequenceHandler(this.animationHandler, \r\n          this.defaultAnimationName, this.defaultAnimationFadeDuration);\r\n\r\n      for(const fbxAnimation of this.fbxAnimations){\r\n\r\n        fbxAnimation.animationAction = this.animationActions[fbxAnimation.actionAnimationName];\r\n        this.animationHandler.fbxAnimations[fbxAnimation.name] = fbxAnimation;\r\n      }\r\n      \r\n      this.modelLoaded = true;\r\n    }\r\n  }\r\n\r\n  loadAnimation(animationFilePath, animationName){    \r\n    this.loader.load( animationFilePath, ( object ) => {   \r\n      object.animations[0].name = animationName;\r\n  \r\n      const animationAction = this.mixer.clipAction(object.animations[0]);  \r\n      this.animationActions[animationName] = animationAction; \r\n              \r\n    })\r\n  }\r\n\r\n  addAnimationLoopListender(objectWithInvokeFunction){\r\n    this.loopListeners.push(objectWithInvokeFunction)\r\n  }\r\n\r\n  loadAnimations(animationLoaders){\r\n\r\n    this.animationHandler = new AnimationHandler(this.mixer, this.sceneObject);\r\n    \r\n    if(!animationLoaders.length) return;\r\n\r\n    for (const animation of animationLoaders){\r\n\r\n      this.loadAnimation(animation.filePath, animation.name)\r\n      \r\n    }\r\n  }\r\n  \r\n  loadModel(animationLoaders  = null){\r\n    this.loader.load( this.modelPath, ( sceneObject ) => {   \r\n\r\n        if(sceneObject.animations){\r\n          for(const animation of sceneObject.animations){\r\n            const animationAction = this.mixer.clipAction(animation);                \r\n            this.animationActions[animation.name] = animationAction;\r\n          }\r\n        }\r\n\r\n        sceneObject.scale.set(this.scale.x, this.scale.y, this.scale.z);\r\n        sceneObject.position.set(this.position.x, this.position.y, this.position.z);        \r\n        sceneObject.rotation.set(this.rotation.x, this.rotation.y, this.rotation.z);\r\n\r\n        this.mixer = new THREE.AnimationMixer( sceneObject );\r\n\r\n        this.mixer.addEventListener( \r\n          'finished', () => { } );\r\n\r\n        this.mixer.addEventListener( \r\n          'loop', () => {             \r\n            if( this.loopListeners.length ){\r\n              for(const listener of this.loopListeners){            \r\n                listener.invokeLoopListener();\r\n              }\r\n            }\r\n          } );          \r\n        \r\n        sceneObject.traverse(  ( child ) => {\r\n\r\n            if ( child.isMesh ) {  \r\n              child.castShadow = this.castShadow;\r\n              child.receiveShadow = this.receiveShadow;    \r\n            } \r\n          }\r\n        )    \r\n\r\n        this.loadAnimations(animationLoaders)\r\n\r\n        this.scene.add( sceneObject );\r\n        this.sceneObject = sceneObject;\r\n        \r\n      });\r\n  }\r\n\r\n  playAnimation(name, fadeDuration=0, loop){\r\n    if(this.modelLoaded){\r\n      this.animationHandler.playAnimation(name, fadeDuration, loop);\r\n    }\r\n    else{\r\n      console.log('Model or animations not loaded')\r\n    }\r\n  }\r\n\r\n  update(elapsedTime, deltaTime){\r\n    this.animationHandler.update(elapsedTime, deltaTime, this.sceneObject);\r\n    if(this.animationSequenceHandler){\r\n      this.animationSequenceHandler.update(deltaTime, this.sceneObject);\r\n    }\r\n  }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/Idle.a5a8a64c.fbx\";","export default __webpack_public_path__ + \"static/media/Running.361c36a5.fbx\";","export default __webpack_public_path__ + \"static/media/Jump To Freehang.20eb9b39.fbx\";","export default __webpack_public_path__ + \"static/media/Hanging Idle.0b1e6d2e.fbx\";","export default __webpack_public_path__ + \"static/media/Braced To Free Hang.42600c18.fbx\";","export default __webpack_public_path__ + \"static/media/Freehang Drop.cc1b3c8b.fbx\";","export default __webpack_public_path__ + \"static/media/Right Turn.a0035427.fbx\";","export default __webpack_public_path__ + \"static/media/Left Turn.ae476b1a.fbx\";","export default __webpack_public_path__ + \"static/media/Hard Landing.921bde32.fbx\";","export default __webpack_public_path__ + \"static/media/Falling Idle.f10e84c5.fbx\";","export default __webpack_public_path__ + \"static/media/Pull Heavy Object.de072c21.fbx\";","export default __webpack_public_path__ + \"static/media/Texting While Standing.95999f0a.fbx\";","export default __webpack_public_path__ + \"static/media/Walk Strafe Left.0558dfac.fbx\";","export default __webpack_public_path__ + \"static/media/Walk Strafe Right.6b3e5ee8.fbx\";","import { AnimationLoader } from './AnimationSystem'\r\nimport { TranslateToTween, RotateToTween, AnimationSequenceStep, FBXAnimation } from './AnimationSystem';\r\nimport { gsap } from \"gsap\";\r\nimport { CustomEase } from \"gsap/CustomEase\";\r\nimport { Vector3 } from 'three';\r\n\r\nimport idleAnimationFBX from '../FBX/Animations/Idle.fbx'\r\nimport runningAnimationFBX from '../FBX/Animations/Running.fbx'\r\nimport jumpToFreeHangFBX from '../FBX/Animations/Jump To Freehang.fbx'\r\nimport hangingIdleFBX from '../FBX/Animations/Hanging Idle.fbx'\r\nimport bracedToFreeHangFBX from '../FBX/Animations/Braced To Free Hang.fbx'\r\nimport freehangDropFBX from '../FBX/Animations/Freehang Drop.fbx'\r\nimport standRightTurnFBX from '../FBX/Animations/Right Turn.fbx'\r\nimport standLeftTurnFBX from '../FBX/Animations/Left Turn.fbx'\r\nimport hardLandingFBX from '../FBX/Animations/Hard Landing.fbx'\r\nimport fallingIdleFBX from '../FBX/Animations/Falling Idle.fbx'\r\nimport pullHeavyObjectFBX from '../FBX/Animations/Pull Heavy Object.fbx'\r\nimport textingWhileStandingFBX from '../FBX/Animations/Texting While Standing.fbx'\r\nimport walkStrifeLeftFBX from '../FBX/Animations/Walk Strafe Left.fbx'\r\nimport walkStrifeRightFBX from '../FBX/Animations/Walk Strafe Right.fbx'\r\n\r\ngsap.registerPlugin(CustomEase);\r\n\r\n\r\n\r\nexport const FBXAnimationNames = { Idle : 'Idle',\r\n                                  Running : 'Running',\r\n                                  JumpToFreehang : 'JumpToFreehang',                                  \r\n                                  HangingIdle : 'HangingIdle',\r\n                                  BracedToFreeHang : 'BracedToFreeHang',\r\n                                  FreehangDrop : 'FreehangDrop',\r\n                                  StandRightTurn : 'StandRightTurn',\r\n                                  StandLeftTurn : 'StandLeftTurn',\r\n                                  HardLanding : 'HardLanding',\r\n                                  FallingIdle : 'FallingIdle',\r\n                                  PullHeavyObject : 'PullHeavyObject',\r\n                                  TextingWhileStanding : 'TextingWhileStanding', \r\n                                  WalkStrafeLeft : 'WalkStrafeLeft',\r\n                                  WalkStrafeRight : 'WalkStrafeRight'                              \r\n                                }\r\n\r\nconst idleAnimation = new AnimationLoader(FBXAnimationNames.Idle, idleAnimationFBX);\r\nconst runningAnimation = new AnimationLoader(FBXAnimationNames.Running, runningAnimationFBX);\r\nconst jumpToFreeHang = new AnimationLoader(FBXAnimationNames.JumpToFreeHang, jumpToFreeHangFBX);\r\nconst hangingIdle = new AnimationLoader(FBXAnimationNames.HangingIdle, hangingIdleFBX);\r\nconst bracedToFreeHang = new AnimationLoader(FBXAnimationNames.BracedToFreeHang, bracedToFreeHangFBX);\r\nconst freehangDrop = new AnimationLoader(FBXAnimationNames.FreehangDrop, freehangDropFBX);\r\nconst standRightTurn = new AnimationLoader(FBXAnimationNames.StandRightTurn, standRightTurnFBX);\r\nconst standLeftTurn = new AnimationLoader(FBXAnimationNames.StandLeftTurn, standLeftTurnFBX);\r\nconst hardLanding = new AnimationLoader(FBXAnimationNames.HardLanding, hardLandingFBX);\r\nconst fallingIdle = new AnimationLoader(FBXAnimationNames.FallingIdle, fallingIdleFBX);\r\nconst pullHeavyObject = new AnimationLoader(FBXAnimationNames.PullHeavyObject, pullHeavyObjectFBX);\r\nconst textingWhileStanding = new AnimationLoader(FBXAnimationNames.TextingWhileStanding, textingWhileStandingFBX);\r\nconst walkStrifeLeft = new AnimationLoader(FBXAnimationNames.WalkStrafeLeft, walkStrifeLeftFBX);\r\nconst walkStrifeRight = new AnimationLoader(FBXAnimationNames.WalkStrafeRight, walkStrifeRightFBX);\r\n\r\nexport const kyleAnimationLoaders = [idleAnimation,\r\n                                    runningAnimation,\r\n                                    jumpToFreeHang,\r\n                                    hangingIdle,\r\n                                    bracedToFreeHang,\r\n                                    freehangDrop,\r\n                                    standRightTurn,\r\n                                    standLeftTurn,\r\n                                    hardLanding,\r\n                                    fallingIdle,\r\n                                    pullHeavyObject,\r\n                                    textingWhileStanding,\r\n                                    walkStrifeLeft,\r\n                                    walkStrifeRight];\r\n\r\n\r\n\r\n\r\n                                 \r\n//                                 //ORG  : M0,0 C0,0 0.289,-0.118 0.364,-0.044 0.47,0.062 0.503,0.297 0.59,0.488 0.711,0.757 0.816,0.996 0.997,0.996 0.999,0.998 1,1 1,1 \r\nexport const kyleAnimations = [\r\n                                new FBXAnimation(FBXAnimationNames.Idle, FBXAnimationNames.Idle),\r\n                                new FBXAnimation(FBXAnimationNames.Running, FBXAnimationNames.Running),\r\n                                new FBXAnimation(FBXAnimationNames.JumpToFreehang, FBXAnimationNames.JumpToFreeHang),                                \r\n                                new FBXAnimation(FBXAnimationNames.HangingIdle, FBXAnimationNames.HangingIdle),\r\n                                new FBXAnimation(FBXAnimationNames.BracedToFreeHang, FBXAnimationNames.BracedToFreeHang),\r\n                                new FBXAnimation(FBXAnimationNames.FreehangDrop, FBXAnimationNames.FreehangDrop),\r\n                                new FBXAnimation(FBXAnimationNames.StandRightTurn, FBXAnimationNames.StandRightTurn), \r\n                                new FBXAnimation(FBXAnimationNames.StandLeftTurn, FBXAnimationNames.StandLeftTurn), \r\n                                new FBXAnimation(FBXAnimationNames.HardLanding, FBXAnimationNames.HardLanding),\r\n                                new FBXAnimation(FBXAnimationNames.FallingIdle, FBXAnimationNames.FallingIdle),\r\n                                new FBXAnimation(FBXAnimationNames.PullHeavyObject, FBXAnimationNames.PullHeavyObject),\r\n                                new FBXAnimation(FBXAnimationNames.TextingWhileStanding, FBXAnimationNames.TextingWhileStanding),\r\n                                new FBXAnimation(FBXAnimationNames.WalkStrafeLeft, FBXAnimationNames.WalkStrafeLeft),\r\n                                new FBXAnimation(FBXAnimationNames.WalkStrafeRight, FBXAnimationNames.WalkStrafeRight)                                    \r\n                              ]\r\n\r\n\r\nconst jumpToFreeHangEase = CustomEase.create(\"custom\", \"M0,0 C0.29,0 0.238,-0.02 0.27,0.086 0.32,0.342 0.338,0.47 0.364,0.61 0.41,0.802 0.434,0.824 0.502,0.93 0.579,1.05 0.69,1.024 0.8,1 0.852,0.988 0.901,1 1,1\");\r\n// const hangDropEase = CustomEase.create(\"custom\", \"M0,0 C0.044,0.065 0.289,0.4 0.5,0.4 0.74,0.399 0.949,0.053 1,0 \")\r\n\r\nexport const createIntroSequence = (fieldOfView, sceneRatio, cameraZ) => {\r\n  \r\n  const hScreenEdgeByZPosition = (z) => {\r\n    var hFOV = 2 * Math.atan(Math.tan(fieldOfView/2 * Math.PI/180) * sceneRatio)          \r\n    var x = Math.tan(hFOV/2) * (z-cameraZ);\r\n    return Math.abs(x);\r\n  }\r\n\r\n  const introSequence = [\r\n    // new AnimationSequenceStep(FBXAnimationNames.Idle, 1, 1),\r\n    // new AnimationSequenceStep(FBXAnimationNames.Running, 1, 1, \r\n    //   [\r\n    //     new TranslateToTween(1, 'power1.in', new Vector3(0, -1, -9))\r\n    //   ]), \r\n    new AnimationSequenceStep(FBXAnimationNames.Running, 3, 0.5, \r\n      [\r\n        new TranslateToTween(3, 'none', new Vector3(0, -1, 1))\r\n      ]),  \r\n    new AnimationSequenceStep(FBXAnimationNames.Idle, 0.5, 0.5, \r\n      [\r\n        new TranslateToTween(0.5, 'power1.out', new Vector3(0, -1, 2))\r\n      ]),    \r\n    // new AnimationSequenceStep(FBXAnimationNames.Idle, 1, 1, \r\n    //   [\r\n    //     new TranslateToTween(1, 'power1.out', new Vector3(0, -1, 2))\r\n    //   ]),                          \r\n    new AnimationSequenceStep(FBXAnimationNames.JumpToFreehang, 2, 0.5,\r\n      [\r\n        new TranslateToTween(2, jumpToFreeHangEase, new Vector3(0, 0.2, 2))\r\n      ]),\r\n    new AnimationSequenceStep(FBXAnimationNames.HangingIdle, 0.5, 0.5),\r\n    new AnimationSequenceStep(FBXAnimationNames.BracedToFreeHang, 1, 0.5,\r\n      [\r\n        new TranslateToTween(0.7, 'power1.in', new Vector3(0, 0.6, 2))\r\n      ]),   \r\n    new AnimationSequenceStep(FBXAnimationNames.FallingIdle, 0.5, 0.5,\r\n      [\r\n        new TranslateToTween(0.5, 'power1.in', new Vector3(0, 0.1, 2)),                               \r\n      ], 'Navbar Pull'),  \r\n    new AnimationSequenceStep(FBXAnimationNames.HardLanding, 1, 0.1,\r\n      [\r\n        new TranslateToTween(0.4, 'none', new Vector3(0, -1, 2)),                               \r\n      ]), \r\n    new AnimationSequenceStep(FBXAnimationNames.Idle, 0.5, 0.5),\r\n    new AnimationSequenceStep(FBXAnimationNames.StandRightTurn, 0.8, 0.2,\r\n    [\r\n      new RotateToTween(0.8, 'power1.inOut', new Vector3(0, -Math.PI/2, 0))\r\n    ]),    \r\n    new AnimationSequenceStep(FBXAnimationNames.Running, 2, 0.7, \r\n      [\r\n        new TranslateToTween(2, 'power1.in', new Vector3(-hScreenEdgeByZPosition(2) + 0.8, -1, 2), false)\r\n      ]),\r\n\r\n    new AnimationSequenceStep(FBXAnimationNames.Idle, 0.5, 0.5,\r\n      [\r\n      new TranslateToTween(0.5, 'power1.out', new Vector3(-hScreenEdgeByZPosition(2) + 0.3, -1, 2), false)\r\n      ]),\r\n    new AnimationSequenceStep(FBXAnimationNames.PullHeavyObject, 4, 0.5, \r\n      [\r\n        new TranslateToTween(70/60, 'power1.inOut', new Vector3(0, 0, -1), true, true)\r\n      ], 'Pull Name'),\r\n    new AnimationSequenceStep(FBXAnimationNames.StandLeftTurn, 1, 0.2,\r\n      [\r\n        new RotateToTween(0.8, 'none', new Vector3(0, 0, 0))\r\n      ]),\r\n    new AnimationSequenceStep(FBXAnimationNames.Idle, 0.5, 0.5),\r\n    new AnimationSequenceStep(FBXAnimationNames.TextingWhileStanding, 11, 0.5, [], 'Kyle Texting'),\r\n  ];\r\n\r\n  return introSequence;\r\n}\r\n\r\n\r\n\r\n\r\n            ","export default __webpack_public_path__ + \"static/media/Kyle.f01d25c9.fbx\";","import React, { Component, useContext, useEffect, useState, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as THREE from \"three\";\r\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nimport colonnaMT from '../Fonts/Colonna MT_Regular.json';\r\nimport robotFont from '../Fonts/Roboto Black_Italic.json'\r\n\r\nimport { AnimationLoader, FBXModel, RotateToTween, TranslateToTween, customEventTracker } from './AnimationSystem';\r\nimport { FBXAnimationNames, kyleAnimationLoaders, createIntroSequence, kyleAnimations } from './Animations';\r\nimport { Vector3 } from \"three\";\r\n\r\nimport { Context3D } from \"../Context\";\r\n\r\nimport kyleModel from '../FBX/Kyle.fbx'\r\n\r\nconst Render3D = (props) => {\r\n  const mount = useRef(null)\r\n  \r\n  const {handleOnFinishedLoading3D, handleNavbarPulled, render3DLoaded, setRender3DLoaded, handleKyleTexting } = useContext(Context3D);\r\n  \r\n\r\n  useEffect(() => {\r\n    const start = () => {\r\n      if (!frameId) {\r\n        frameId = requestAnimationFrame(update)\r\n      }\r\n    }\r\n    const stop = () => {\r\n      cancelAnimationFrame(frameId)\r\n    }\r\n  \r\n    const renderScene = () => {\r\n      renderer.render(scene, camera)\r\n    }\r\n  \r\n    const handleKeyPressed = (elapsedTime, deltaTime) => {\r\n      for(const [key, value] of Object.entries(keyIsPressed)){\r\n        if(value){\r\n          switch (key) {\r\n            case 'Numpad1':\r\n              break;\r\n            case 'Numpad2':\r\n              break;\r\n            case 'Numpad3':\r\n              break;\r\n            case 'Numpad4':            \r\n              break;\r\n            case 'Numpad5':           \r\n              break;\r\n            case 'Numpad6':\r\n              break;\r\n            case 'ArrowUp':\r\n              break;\r\n            case 'ArrowDown':\r\n              break;\r\n            case 'ArrowRight':\r\n              break;\r\n            case 'ArrowLeft':\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Update Frame Loop\r\n    const update =  () => {  \r\n      var deltaTime = clock.getDelta();\r\n      var elapsedTime = clock.getElapsedTime();  \r\n     \r\n      handleKeyPressed(elapsedTime, deltaTime);\r\n  \r\n      if(kyleRobot){\r\n        \r\n        if(kyleRobot.modelLoaded){\r\n  \r\n          kyleRobot.update(elapsedTime, deltaTime);\r\n  \r\n          if(!sceneInitiated){         \r\n            const introSequence = createIntroSequence(fieldOfView, sceneRatio, camera.position.z);\r\n            kyleRobot.animationSequenceHandler.loadSequence(introSequence);   \r\n  \r\n            var moveTextTween = new TranslateToTween(70/60, 'power1.inOut', new Vector3(1, 0, 0), true, true);\r\n            kyleRobot.animationSequenceHandler.addListenerToStep('Pull Name', 'start', () => moveTextTween.play(pascalSchottText), false)\r\n            kyleRobot.animationSequenceHandler.addListenerToStep('Pull Name', 'finished', () => moveTextTween.stop(), false)\r\n\r\n            kyleRobot.animationSequenceHandler.addListenerToStep('Navbar Pull', 'start', () => handleNavbarPulled(), false)\r\n\r\n            kyleRobot.animationSequenceHandler.addListenerToStep('Kyle Texting', 'start', () => handleKyleTexting(), false)\r\n            \r\n            \r\n          \r\n            sceneInitiated = true;\r\n            handleOnFinishedLoading3D();\r\n            setRender3DLoaded(true);\r\n          }\r\n        }\r\n      }\r\n  \r\n      renderScene()\r\n      frameId = window.requestAnimationFrame(update)\r\n    };   \r\n\r\n    const handleKeyDown = (e) => {\r\n      switch (e.code){\r\n        case 'Space':\r\n          break;\r\n        case 'Digit1':\r\n          kyleRobot.playAnimation(FBXAnimationNames.Idle, 1);\r\n          break;\r\n        case 'Digit2':\r\n          kyleRobot.playAnimation(FBXAnimationNames.Running, 1);\r\n            break;\r\n        case 'Digit3':\r\n          kyleRobot.playAnimation(FBXAnimationNames.JumpToFreehangRootMotion, 0.2, false);\r\n          break;\r\n        case 'Digit4':             \r\n          break;\r\n        case 'Digit5':     \r\n          break;\r\n        default:\r\n          if(e.code in keyIsPressed){\r\n            keyIsPressed[e.code] = true;\r\n          }       \r\n          break;\r\n      }      \r\n    }\r\n\r\n    const handleKeyUp = (e) => {\r\n      switch (e.code){\r\n        case 'Space':\r\n          break;       \r\n        default:\r\n          if(e.code in keyIsPressed){\r\n            keyIsPressed[e.code] = false;\r\n          }        \r\n          break;\r\n      }      \r\n    }\r\n\r\n    const hScreenEdgeByZPosition = (z) => {\r\n      var hFOV = 2 * Math.atan(Math.tan(fieldOfView/2 * Math.PI/180) * sceneRatio)          \r\n      var x = Math.tan(hFOV/2) * (z-camera.position.z);\r\n      return Math.abs(x);\r\n    }\r\n\r\n\r\n    let frameId;\r\n    let renderer;\r\n    let scene;\r\n    let camera;\r\n    let keyIsPressed;\r\n    let clock;\r\n    let kyleRobot;\r\n    let sceneInitiated;\r\n    let pascalSchottText;\r\n\r\n    const fieldOfView = 75;\r\n\r\n    const marginVertical = 0;\r\n    const marginHorizontal = 60;\r\n\r\n    const sceneWidth = props.innerWidth\r\n    const sceneHeight = props.innerHeight\r\n    const sceneRatio = sceneWidth/sceneHeight    \r\n\r\n    sceneInitiated = false;\r\n\r\n    keyIsPressed = {\r\n      Numpad1 : false,\r\n      Numpad2 : false,\r\n      Numpad3 : false,\r\n      Numpad4 : false,\r\n      Numpad5 : false,\r\n      Numpad6 : false,\r\n      ArrowLeft : false,\r\n      ArrowRight : false,\r\n      ArrowUp : false,\r\n      ArrowDown : false,\r\n    }\r\n\r\n    document.addEventListener('keydown', handleKeyDown, false); \r\n    document.addEventListener('keyup', handleKeyUp, false);  \r\n\r\n    // Scene Setup\r\n    scene = new THREE.Scene();       \r\n    \r\n    camera = new THREE.PerspectiveCamera( fieldOfView, sceneRatio, 0.1, 1000 );\r\n    renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.setSize( sceneWidth, sceneHeight);\r\n    camera.position.z = 5;\r\n\r\n    mount.current.appendChild( renderer.domElement );\r\n    \r\n    // Kyle Model  \r\n    kyleRobot = new FBXModel(kyleModel, scene, new THREE.Vector3(0, -1, -10), new THREE.Vector3(0,0,0),\r\n                    new THREE.Vector3(0.01,0.01,0.01), kyleAnimationLoaders, true, true, 'Idle', 0.5, kyleAnimations);\r\n\r\n\r\n\r\n         \r\n    // Pascal Text\r\n    const font = new FontLoader().parse(robotFont);\r\n\r\n    const textConfig = {\r\n      font: font,\r\n      size: 0.6,\r\n      height: 0.1,      \r\n    }\r\n\r\n    pascalSchottText = new THREE.Object3D();\r\n\r\n    const textColor = '#cee6eb'\r\n    var geometry = new TextGeometry( 'Pascal',  textConfig);\r\n  \r\n    var material = new THREE.MeshStandardMaterial( { color: textColor, roughness : 0, metalness : 0  } );\r\n    var pascalText =  new THREE.Mesh( geometry, material );\r\n    pascalSchottText.add( pascalText );\r\n    pascalText.position.x = -2\r\n    pascalText.position.y = 0.8\r\n\r\n    var geometry = new TextGeometry( 'Schott',  textConfig);\r\n  \r\n    var material = new THREE.MeshStandardMaterial( { color: textColor, roughness : 0, metalness : 0  } );\r\n    var schottText =  new THREE.Mesh( geometry, material );\r\n    pascalSchottText.add( schottText );\r\n    schottText.position.x = -2.1\r\n    schottText.position.y = 0\r\n\r\n    scene.add(pascalSchottText);    \r\n    pascalSchottText.position.z = 2;\r\n\r\n    pascalSchottText.position.x = -hScreenEdgeByZPosition(pascalSchottText.position.z) + -0.5;\r\n    \r\n\r\n    // Plane\r\n    var geometry = new THREE.PlaneGeometry( 100, 40, 10 );\r\n    var material = new THREE.MeshStandardMaterial( { color: \"#ffffff\", roughness : 0, metalness : 0  } );\r\n    var plane = new THREE.Mesh( geometry, material );\r\n    scene.add( plane );\r\n    plane.rotation.x = -Math.PI / 2;\r\n    plane.position.y = -1;\r\n    plane.receiveShadow = true;\r\n\r\n    // Lighting\r\n    var hemisphereLight = new THREE.HemisphereLight(\"#ffffff\" ,\"#ffffff\", 0.6);\r\n    scene.add(hemisphereLight);\r\n\r\n    var directionalLight = new THREE.DirectionalLight(\"#ffffff\", 1);\r\n    scene.add(directionalLight);\r\n    directionalLight.position.set(10, 10, 10);\r\n    directionalLight.castShadow =  true;\r\n\r\n    // Clock\r\n    clock = new THREE.Clock()\r\n\r\n    // Start Update Loop\r\n    start()\r\n\r\n    \r\n\r\n    return () => {\r\n      customEventTracker.cleanUp();\r\n      stop();\r\n      mount.current.removeChild(renderer.domElement);\r\n    } \r\n  }, [])\r\n\r\n \r\n  return (\r\n    <div style={{ margin : 'auto', padding : 0, position : 'absolute',  width : props.innerWidth, height : props.innerHeight, top: 0}}>\r\n      <div style={{  padding : 0, width : props.innerWidth, height : props.innerHeight}} \r\n        ref={mount} />\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default Render3D;","import './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport React, { useState, useEffect, useContext, useRef } from 'react';\r\n\r\nimport AppRoutes from './AppRoutes';\r\nimport Navbar from './Shared/Navbar';\r\nimport {Provider, defaultTheme } from '@adobe/react-spectrum';\r\nimport { Loader, Dimmer } from 'semantic-ui-react';\r\n\r\nimport Statusbar from './Shared/Statusbar';\r\nimport { StatusbarContext, Context3D } from './Context';\r\n\r\nimport Render3D from './3D/Render3D';\r\n\r\nimport gsap from \"gsap\";\r\n\r\nimport WebFont from 'webfontloader';\r\n\r\nWebFont.load({\r\n    custom: {\r\n      families: ['Roboto-Thin'],\r\n    },\r\n  });\r\n\r\nconst status = require('./configs/status.json');\r\n\r\nfunction App() {\r\n  const [windowSize, setWindowSize] = useState( {\"height\" : window.innerHeight, \"width\" : window.innerWidth} );\r\n  const [globalStatus, setGlobalStatus] = useState( {'status' : status.Ready, 'statusText' : 'Ready'} );\r\n  const [render3DLoaded, setRender3DLoaded] = useState(false);\r\n  const [render3DVisibility, setRender3DVisibility] = useState('hidden');\r\n  const [homeKyleTextingTrrigger, setHomeKyleTextingTrrigger] = useState(false)\r\n                      \r\n  \r\n  const navbar = useRef();\r\n\r\n  const handleResize = () => {\r\n    setWindowSize({ \"height\" : window.innerHeight, \"width\" : window.innerWidth });\r\n  };\r\n\r\n  const handleOnFinishedLoading3D = () => {    \r\n    setRender3DVisibility('visible')  \r\n  } \r\n\r\n  const handleNavbarPulled = () => {\r\n    gsap.to(navbar.current, {duration : 2, ease : 'bounce', top : 0})\r\n  }\r\n\r\n  const handleKyleTexting = () => {\r\n    console.log('TRIGGER APP TEXTING')\r\n    setHomeKyleTextingTrrigger(true);\r\n  }\r\n\r\n  useEffect(() => {      \r\n      \r\n      window.addEventListener(\"resize\", handleResize, false);     \r\n      }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">  \r\n      <Provider theme={defaultTheme} colorScheme=\"light\" >\r\n        <div style={{ backgroundColor : \"#ffffff\"}}>\r\n        <StatusbarContext.Provider value={{globalStatus, setGlobalStatus}}>\r\n          <Context3D.Provider value={{handleOnFinishedLoading3D, handleNavbarPulled, render3DLoaded, setRender3DLoaded,\r\n            handleKyleTexting}}\r\n          >\r\n            <div ref={navbar} style={{position : 'absolute', top : -60, zIndex : 10, width : windowSize.width}}>          \r\n              <Navbar/>\r\n            </div>  \r\n            <div style={{visibility : render3DVisibility}}>\r\n              <Render3D innerHeight = {window.innerHeight} innerWidth = {window.innerWidth}/>  \r\n            </div>\r\n            <div style={{overflowY: \"scroll\", marginLeft : '1%', marginRight : '1%', height : window.innerHeight - 105, marginTop : 60 }} >\r\n              {!render3DLoaded ? \r\n                <div>\r\n                <Dimmer active inverted>\r\n                <Loader size='massive'>Loading</Loader> \r\n                </Dimmer> \r\n                </div>    \r\n                :\r\n                <div/>  \r\n              }  \r\n              <AppRoutes homeKyleTextingTrrigger={homeKyleTextingTrrigger}/> \r\n            </div>    \r\n            <Statusbar status={globalStatus.status} statusText={globalStatus.statusText}/>\r\n          </Context3D.Provider>\r\n        </StatusbarContext.Provider>\r\n        </div>\r\n      </Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}